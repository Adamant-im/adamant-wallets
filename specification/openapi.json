{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Adamant-wallets"
  },
  "paths": {},
  "components": {
    "schemas": {
      "NodeInfo": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {
            "type": "string"
          },
          "alt_ip": {
            "type": "string"
          },
          "hasIndex": {
            "type": "boolean"
          }
        }
      },
      "NodeHealthcheck": {
        "type": "object",
        "required": [
          "normalUpdateInterval",
          "crucialUpdateInterval",
          "onScreenUpdateInterval",
          "threshold"
        ],
        "properties": {
          "normalUpdateInterval": {
            "type": "integer",
            "description": "Regular node status update interval in ms"
          },
          "crucialUpdateInterval": {
            "type": "integer",
            "description": "Node status update interval when there are no active nodes, in ms"
          },
          "onScreenUpdateInterval": {
            "type": "integer",
            "description": "On the node screen, the status update interval in ms"
          },
          "threshold": {
            "type": "integer",
            "description": "Permissible height difference between nodes"
          }
        }
      },
      "ProjectLink": {
        "type": "object",
        "required": ["name", "url"],
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Service": {
        "type": "object",
        "required": ["description", "list", "healthCheck", "displayName"],
        "properties": {
          "description": {
            "$ref": "#/components/schemas/ServiceDescription"
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeInfo"
            }
          },
          "healthCheck": {
            "$ref": "#/components/schemas/ServiceHealthcheck"
          },
          "displayName": {
            "type": "string"
          }
        }
      },
      "ServiceDescription": {
        "type": "object",
        "required": ["software"],
        "description": "Service node description",
        "properties": {
          "software": {
            "type": "string"
          },
          "github": {
            "type": "string"
          },
          "docs": {
            "type": "string"
          }
        }
      },
      "ServiceHealthcheck": {
        "type": "object",
        "required": [
          "normalUpdateInterval",
          "crucialUpdateInterval",
          "onScreenUpdateInterval"
        ],
        "properties": {
          "normalUpdateInterval": {
            "type": "integer",
            "description": "Regular node status update interval in ms"
          },
          "crucialUpdateInterval": {
            "type": "integer",
            "description": "Node status update interval when there are no active nodes, in ms"
          },
          "onScreenUpdateInterval": {
            "type": "integer",
            "description": "On the node screen, the status update interval in ms"
          }
        }
      },
      "MessageTimeout": {
        "type": "object",
        "description": "Timeouts when sending messages in chat. See [README.md](https://github.com/Adamant-im/adamant-wallets/blob/master/README.md#message-sending) for details.",
        "required": ["message", "attachment"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Timeout for regular messages (in milliseconds)"
          },
          "attachment": {
            "type": "integer",
            "description": "Timeout for file transfers (in milliseconds)"
          }
        }
      },
      "TokenGeneral": {
        "type": "object",
        "required": [
          "name",
          "website",
          "description",
          "symbol",
          "type",
          "decimals",
          "cryptoTransferDecimals",
          "status",
          "createCoin"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Readable coin name"
          },
          "nameShort": {
            "type": "string",
            "description": "Readable coin short name"
          },
          "website": {
            "type": "string",
            "description": "Project website URL"
          },
          "description": {
            "type": "string",
            "description": "Short description"
          },
          "explorer": {
            "type": "string",
            "description": "Explorer URL"
          },
          "explorerTx": {
            "type": "string",
            "description": "URL to get tx info"
          },
          "explorerAddress": {
            "type": "string",
            "description": "URL to get address info"
          },
          "explorerContract": {
            "type": "string",
            "description": "URL to get contract info"
          },
          "regexAddress": {
            "type": "string",
            "description": "RegEx to validate coin address"
          },
          "research": {
            "type": "string",
            "description": "Research URL"
          },
          "symbol": {
            "type": "string",
            "description": "Coin ticker"
          },
          "type": {
            "type": "string",
            "enum": ["coin", "ERC20"],
            "description": "Coin or token mainly"
          },
          "decimals": {
            "type": "integer",
            "description": "Decimal places"
          },
          "cryptoTransferDecimals": {
            "type": "integer",
            "description": "Max precision for tx"
          },
          "minBalance": {
            "type": "number",
            "description": "Minimum acceptable amount for an address"
          },
          "minTransferAmount": {
            "type": "number",
            "description": "Minimum acceptable amount for tx"
          },
          "fixedFee": {
            "type": "number",
            "description": "Fixed transfer fee"
          },
          "defaultFee": {
            "type": "number",
            "description": "When the transfer fee is variable, but an app has not yet calculated it"
          },
          "qqPrefix": {
            "type": "string",
            "description": "QR code prefix for an address"
          },
          "status": {
            "type": "string",
            "enum": ["active", "disabled"],
            "description": "Should the coin be processed"
          },
          "createCoin": {
            "type": "boolean",
            "description": "Should an app itself create the coin or only use the info for the blockchain"
          },
          "defaultVisibility": {
            "type": "boolean",
            "description": "To show a coin by default, or hide it"
          },
          "defaultOrdinalLevel": {
            "type": "integer",
            "description": "Default ordinal number in a wallet list. Coins with the same ordinal number are sorted alphabetically. Coins without an order are shown last, alphabetically"
          },
          "consensus": {
            "type": "string",
            "description": "Blockchain consensus type"
          },
          "blockTimeFixed": {
            "type": "integer",
            "description": "Fixed block time in ms"
          },
          "blockTimeAvg": {
            "type": "integer",
            "description": "Average block time in ms"
          },
          "txFetchInfo": {
            "type": "object",
            "properties": {
              "newPendingInterval": {
                "type": "integer",
                "description": "Interval between fetching Tx in ms when its current status is \"Pending\" for new transactions"
              },
              "oldPendingInterval": {
                "type": "integer",
                "description": "Interval between fetching Tx in ms when its current status is \"Pending\" for old transactions"
              },
              "registeredInterval": {
                "type": "integer",
                "description": "Interval between fetching Tx in ms when its current status is \"Registered\""
              },
              "newPendingAttempts": {
                "type": "integer",
                "description": "Attempts to fetch Tx when its current status is \"Pending\" for new transactions"
              },
              "oldPendingAttempts": {
                "type": "integer",
                "description": "Attempts to fetch Tx when its current status is \"Pending\" for old transactions"
              }
            }
          },
          "timeout": {
            "$ref": "#/components/schemas/MessageTimeout"
          },
          "txConsistencyMaxTime": {
            "type": "integer",
            "description": "Time in ms when difference between in-chat transfer and Tx timestamp considered as acceptable"
          },
          "nodes": {
            "type": "object",
            "required": ["list", "healthCheck", "displayName"],
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeInfo"
                },
                "description": "Node links for API"
              },
              "healthCheck": {
                "$ref": "#/components/schemas/NodeHealthcheck"
              },
              "displayName": {
                "type": "string"
              },
              "minVersion": {
                "type": "string",
                "description": "Minimal node API version",
                "example": "0.8.0"
              },
              "nodeTimeCorrection": {
                "type": "integer",
                "description": "A time correction for the message transactions on ADM",
                "example": 500
              }
            }
          },
          "services": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectLink"
            },
            "description": "Additional project links"
          },
          "tor": {
            "type": "object",
            "properties": {
              "website": {
                "type": "string",
                "description": "Project website URL (Tor)"
              },
              "explorer": {
                "type": "string",
                "description": "Explorer URL (Tor)"
              },
              "explorerTx": {
                "type": "string",
                "description": "URL to get tx info (Tor)"
              },
              "explorerAddress": {
                "type": "string",
                "description": "URL to get address info (Tor)"
              },
              "nodes": {
                "type": "object",
                "required": ["list", "healthCheck", "displayName"],
                "properties": {
                  "list": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NodeInfo"
                    },
                    "description": "Node links for API"
                  },
                  "healthCheck": {
                    "$ref": "#/components/schemas/NodeHealthcheck"
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "minVersion": {
                    "type": "string",
                    "description": "Minimal node API version",
                    "example": "0.8.0"
                  },
                  "nodeTimeCorrection": {
                    "type": "integer",
                    "description": "A time correction for the message transactions on ADM",
                    "example": 500
                  }
                }
              },
              "services": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Service"
                }
              },
              "links": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectLink"
                },
                "description": "Additional project links (Tor)"
              }
            }
          }
        }
      },
      "TokenAsset": {
        "type": "object",
        "required": ["name", "symbol", "status", "contractId", "decimals"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Readable coin name"
          },
          "symbol": {
            "type": "string",
            "description": "Coin ticker"
          },
          "status": {
            "type": "string",
            "enum": ["active", "disabled"],
            "description": "Should the coin be processed"
          },
          "contractId": {
            "type": "string",
            "description": "ID of contract"
          },
          "defaultVisibility": {
            "type": "boolean",
            "description": "To show a coin by default, or hide it"
          },
          "defaultOrdinalLevel": {
            "type": "integer",
            "description": "Default ordinal number in a wallet list. Coins with the same ordinal number are sorted alphabetically. Coins without an order are shown last, alphabetically"
          },
          "decimals": {
            "type": "integer",
            "description": "Decimal places"
          }
        }
      },
      "Blockchain": {
        "type": "object",
        "required": ["blockchain", "type", "mainCoin", "fees"],
        "properties": {
          "blockchain": {
            "type": "string",
            "description": "Blockchain readable name"
          },
          "type": {
            "type": "string",
            "description": "How an app should mark token blockchain"
          },
          "mainCoin": {
            "type": "string",
            "description": "A coin containing parameters common to the blockchain"
          },
          "fees": {
            "type": "string",
            "description": "Coin to pay fees in"
          },
          "defaultGasLimit": {
            "type": "number"
          }
        }
      }
    }
  }
}
